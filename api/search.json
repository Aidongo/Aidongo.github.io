[{"id":"1bf705b8c909d15201118f0311dec3fe","title":"SSql Language","content":"SSql Language: Simplified SQL and Data Analysis Language 📊Group Member\nRuibin Zhu , Chenhui Liu\nProject OverviewSSql is a simplified SQL and data analysis Domain Specific Language (DSL) designed to simplify tasks such as database querying, data analysis, data cleaning, and generating statistical charts. With a concise syntax defined using Xtext, users can easily create and execute complex queries without needing to understand the intricacies of underlying database technologies.\nSSql supports the following types of statements:\n\nConnectStatement: Connect to a database\nQueryStatement: Execute queries\nStatisticStatement: Generate statistical charts\nVariableDeclaration: Define query variables\nCheckStatement: Check specific database objects\n\nThe following sections will provide instructions on how to set up the environment for using SSql, how to run the project, and how to use the SSql language for query and data analysis tasks.\nEnvironment SetupThe environment required for running this project is Eclipse IDE. Additional modelling and plugin support are required. For more information on the required dependencies, refer to this page (King’s internal credentials required).\nPlease note that Java 11 or higher is required to run this project.\nSome of the above folder projects are intended to live in the base Eclipse environment, while others are created for Runtime Eclipse. The following list displays this separation:\nXtext Project\n\nuk.ac.kcl.mmd.group39. SSql \nuk.ac.kcl.mmd.group39. SSql.ide \nuk.ac.kcl.mmd.group39. SSql.tests \nuk.ac.kcl.mmd.group39. SSql.ui \nuk.ac.kcl.mmd.group39. SSql.ui.tests\n\nRuntime Eclipse:\n\nTestSSql (providing sample .SSql files with corresponding generated code) \nuk.ac.kcl.mmd.group39.ssql.library (A collection of utility classes and methods supporting the SSql language) \nuk.ac.kcl.mmd.group39.SSql.xpect (tests for the language)\n\nSample DatabaseMicrosoft Northwind Trader DatabaseThe project aim to port northwind database from MS SQL 2005 to MySQL,Oracle,PostGreSQL,Sqlite,VistaDB with Tables,Views,Triggers,User Defined Function,Stored Procedure that simulation similary into all databases that include some functions that are available to only advanced databases with simulation and schema readers.\nRunning the ProjectXtext Project\nAfter installing the required dependencies, clone this repository into an Eclipse workspace.\nNavigate to uk.ac.kcl.mmd.group39.SSql and open the SSql.xtext file.\nRight-click anywhere in the file and choose Run As &gt; Generate Xtext Artifacts.\nWait for the artifacts to generate, and then launch Runtime Eclipse by right-clicking on the uk.ac.kcl.mmd.group39.SSql project and choosing Run As &gt; Eclipse Application.\n\nRun Time - Eclipse Xtext Environment\nIn Runtime Eclipse import the trhee projects from above \nTestSSq\nuk.ac.kcl.mmd.group39.SSql.xpect\nuk.ac.kcl.mmd.group39.ssql.library\n\n\nBuild Path with library project \nRight-click TestSSql project choose Buil Path &gt; Configure Build Path... &gt; Projects &gt; Add , then choose the uk.ac.kcl.mmd.group39.ssql.library\n\n\nImport dependency packages\nImport Right-click TestSSql/lib project choose Buil Path &gt; Configure Build Path... &gt; Libraries &gt; Add JARs , then add the following jars:\njcommon-1.0.24.jar\njfreechart-1.5.3.jar\nmysql-connector-j-8.0.32.jar\n\n\n\n\nSample can already be found in the src folder of the TestSsql.SSql\nTo create a new SSql , right-click on the src folder of TestSSql project and choose New &gt; File.\nThe file extension for SSql is .SSql.\n\n\nWrite the contract code and hit Ctrl + S to save it. This action will automatically create a .java file and place it in the src-gen folder. This file will contain the generated Java code.\n\nUsing SSql LanguageTo use the SSql language, start by creating a .SSql file. In this file, you can write SSql queries and data analysis tasks. Here’s a simple example:\n1. Connect StatementEstablish a connection to a MySQL database using the CONNECT statement with a JDBC connection string, username, and password.\nBefore all operations, you must first use this statement to establish a connection to the database\nCONNECT(&#39;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;northwind&#39;,&#39;username&#39;,&#39;password&#39;)\n\n2. Query StatementRetrieve all records from the orders table using the SELECT statement:\n&#x2F;&#x2F; Query Statement\nSELECT * FROM orders\n\n3. Statistic StatementGenerate a bar chart with a title, X and Y labels, and data based on a query:\nsqlCopy codeSTATS CHART BAR &#123;\n\tTitle: &quot;ShipVia&quot;;\n\tXLabel: &quot;Count&quot;;\n\tYLabel: &quot;Y&quot;;\n\tData: (SELECT orders.ShipVia, SUM(orderdetails.UnitPrice * orderdetails.Quantity * (1 - orderdetails.Discount)) FROM orders JOIN orderdetails ON orders.OrderID &#x3D; orderdetails.OrderID  BY orders.ShipVia);\n&#125;\n\n4. VariableDeclarationStore the result of a query in a variable for reuse:\nVAR data4ShipVia &#x3D; (SELECT orders.ShipVia, SUM(orderdetails.UnitPrice * orderdetails.Quantity * (1 - orderdetails.Discount)) FROM orders JOIN orderdetails ON orders.OrderID &#x3D; orderdetails.OrderID  BY orders.ShipVia)\n\n5. Statistic Statement with VariableGenerate bar and line charts using the data stored in a variable:\nsqlCopy codeSTATS CHART BAR &#123;\n\tTitle: &quot;ShipVia&quot;;\n\tXLabel: &quot;Count&quot;;\n\tYLabel: &quot;Y&quot;;\n\tData: (data4ShipVia);\n&#125;\n\nSTATS CHART LINE &#123;\n\tTitle: &quot;ShipVia&quot;;\n\tXLabel: &quot;Count&quot;;\n\tYLabel: &quot;Y&quot;;\n\tData: (data4ShipVia);\n&#125;\n\n\n\n6. Data CleaningPerform data cleaning operations on the products table:\n\nFind duplicates:\n\nsqlCopy codeSTATS CLEAN &#123;\n\tTable: &quot;products&quot;\n\tColumn: &quot;UnitPrice&quot;\n\tFunction: FIND_DUPLICATES\n&#125;\n\n\nFind missing values:\n\nsqlCopy codeSTATS CLEAN &#123;\n\tTable: &quot;products&quot;\n\tColumn: &quot;UnitPrice&quot;\n\tFunction: FIND_MISSING_VALUES\n&#125;\n\n\nFind missing values and fill with the mean:\n\nsqlCopy codeSTATS CLEAN &#123;\n\tTable: &quot;products&quot;\n\tColumn: &quot;UnitPrice&quot;\n\tFunction: FIND_MISSING_VALUES\n\tSolution: FILL_IN_MEAN\n&#125;\n\n7. Check StatementsPerform various checks on customers and products:\n\nCheck a customer’s billing information:\n\nsqlCopy codeCHECK Customer &#123;\n\tID: &quot;ALFKI&quot;\n\tType: BillAll\n&#125;\n\nCHECK Customer &#123;\n\tID: &quot;ALFKI&quot;\n\tType: Bill\n\tDate: 1994-07-15 to 1995-07-15\n&#125;\n\n\nCheck product information and sales:\n\nsqlCopy codeCHECK Product &#123;\n\tID: &quot;3&quot;\n\tType: ProductInfo\n&#125;\n\nCHECK Product &#123;\n\tType: TopSale\n\tDate: 1996-07-15 to 2000-07-15\n\tLimit: 1\n&#125;\n\nCHECK Product &#123;\n\tCategoryName: &quot;Beverages&quot;\n\tType: GroupCategory\n&#125;\n\nThese use cases provide a solid understanding of the various capabilities of the SSql language and how to use them in practice.\nIn this example, we first connect to the database, then query all data from the employees table, and generate a bar chart displaying the salaries of employees.\nTo execute the SSql code, save the .ssql file. This will automatically generate the corresponding Java or other target language code, which you can copy into the appropriate project to run.\nFuture ImprovementsWhile SSql already offers a wide range of features to simplify data analysis and visualization tasks, there is potential for future improvements to make the language even more powerful and user-friendly. Some possible enhancements include:\n\nMore Visualization Options: Expand the variety of available chart types (e.g., scatter plots, bubble charts, heatmaps) and customization options (e.g., colors, fonts, legend placement) to provide users with more flexibility in data visualization.\nSupport for Additional Database Systems: Broaden the range of supported databases, such as PostgreSQL, Oracle, and MongoDB, to make SSql more versatile for different projects and environments.\nEnhanced Data Cleaning Features: Implement more advanced data cleaning functions, such as outlier detection and handling, data normalization, and pattern recognition.\nImproved Error Handling and Debugging: Provide more detailed error messages and debugging tools to help users identify and resolve issues more efficiently.\nIntegration with Data Analysis Libraries: Integrate popular data analysis libraries (e.g., pandas, NumPy) to further expand SSql’s analytical capabilities.\nUser Interface Improvements: Develop a dedicated graphical user interface (GUI) or plugins for popular IDEs to streamline the SSql development process.\nSupport for Real-Time Data Analysis: Enable real-time data analysis and visualization by incorporating support for streaming data sources and dynamic chart updates.\nPerformance Optimization: Optimize the performance of SSql to handle large datasets and complex queries more efficiently.\n\nBy incorporating these improvements, SSql can continue to evolve and cater to the growing needs of users in the field of data analysis and visualization.\n","slug":"Kings/SSql Introduction","date":"2023-04-03T00:47:00.000Z","categories_index":"King's College London","tags_index":"Coursework","author_index":"ARBIN"},{"id":"da7db9db2fae252fd6be2449c29d4fe0","title":"One Drive使用向导","content":"One Drive 使用教程Step 1. 登录账户\n\nStep 2. 选择One Drive文件夹\n所选择的文件夹将作为One Drive共享文件夹同步至One Drive云盘当中。\n\n可以从其他设备访问One Drive文件夹的文件，但文件仍可以存储在本地Mac设备中\n\n\n具体步骤如下图所示\n\n选择One Drive 文件夹\n\n\n\n\n下图所选择的是Material &gt; Fayeeff\n\n\n\n\n选择成功后界面\n\n\n\n\nOne Drive共享文件夹会创建为 Material &gt; Fayeeff &gt; One Drive 目录\n也可以通过 Finder &gt; OneDrive 中访问OneDrive共享文件夹，在此文件夹下的文件都将同步至共享云盘\n\n\n\n\nStep 3. 上传文件示例\n移动所需上传文件至One Drive当中，如 钢琴基础.pdf\n \n\n文件将上传至One Drive云端中\n \n\n可在浏览器中查看：在线查看\n\n\n \n","slug":"One Drive/One Drive使用教程","date":"2023-04-02T22:44:00.000Z","categories_index":"Guide","tags_index":"One Drive","author_index":"ARBIN"}]